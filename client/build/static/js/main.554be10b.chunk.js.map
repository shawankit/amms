{"version":3,"sources":["data/CustomerData.js","data/MilkData.js","components/Forms/CustomerForm.js","components/Forms/MillBulkForm.js","components/Forms/MilkForm.js","api/index.js","data/InvoiceData.js","util/util.js","components/Modal/PaymentModal.js","components/Homepage.js","components/Navbar.js","images/cryptocurrency.png","components/Customer.js","components/MilkCategory.js","components/common/EditableTable.js","components/Forms/InvoiceForm.js","components/Modal/InvoiceDetailModal.js","components/Invoices.js","components/Stock.js","App.js","index.js","components/common/InputField.js","components/common/SelectField.js"],"names":["CustomerData","label","name","type","inputType","list","MilkData","defaultValue","CustomerForm","data","callback","setEditData","initialData","reduce","previous","field","useState","formData","setFormData","onChange","e","target","value","onSelectChange","useEffect","setRatesToData","rates","Object","values","onSubmit","close","a","console","log","updateCustomer","id","response","status","swal","createCustomer","reset","customerType","map","option","eval","item","text","showSearch","optionFilterProp","showArrow","filterOption","input","children","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","customerId","span","className","onClick","icon","Title","Typography","MilkBulkFom","setRates","fetchMilkCategories","getAllMilkCategories","entity","ratesObj","current","rate","categoryId","level","style","color","height","overflowY","rateObj","lcol","icol","MilkFom","rateDisbaled","setRateDiabled","updateMilCategory","createMilCategory","taxable","gstRate","disabled","url","window","location","hostname","API","axios","create","baseURL","getAllCustomers","get","getCustomersWithDues","customer","post","put","deleteCustomer","delete","deleteMilCategory","createInvoice","invoice","getAllInvoices","getInvoicesByDate","date","getInvoiceById","invoiceId","getDueInvoices","createPayments","payment","createStocks","stocks","getStocks","InvoiceData","sweetalertValidate","message","buttons","cancel","visible","closeModal","confirm","sweetalertMessage","PaymentModal","setVisible","amountReceived","additionalDue","invoices","setInvoices","fetchInvoices","inv","invoiceDate","moment","format","paymentDate","onClose","confirmFunction","cancelFunction","then","isConfirm","columns","column","title","Text","ellipsis","dataIndex","key","width","filter","total","top","keyboard","onCancel","footer","dataSource","bordered","pagination","rowKey","record","Date","getTime","Math","random","previousDue","round","due","InputField","Homepage","reportDate","milk","setMilks","customers","setCustomers","selectedCustomer","setSelectedCustomer","fetchCustomers","length","ele","i","invs","milkCategory","j","catId","undefined","Transaction","quantity","customerColumns","render","onPayment","EditOutlined","overflowX","gutter","millify","scroll","x","Navbar","activeMenu","setActiveMenu","screenSize","setScreenSize","handleResize","innerWidth","addEventListener","removeEventListener","to","MenuOutlined","theme","Item","HomeOutlined","UsergroupAddOutlined","MoneyCollectOutlined","BulbOutlined","StrikethroughOutlined","Customer","setCustomrs","editData","onDelete","push","onEdit","DeleteOutlined","MilkCategory","EditableContext","React","createContext","EditableRow","index","props","Form","useForm","form","component","Provider","EditableCell","editable","handleSave","customerData","restProps","editing","inputRef","useRef","useContext","focus","onSave","newValues","normal","categoryName","parseFloat","totalWithTax","childNode","margin","rules","required","Option","paddingRight","fontSize","EditableTable","setTransactions","transactions","notEditable","setDataSource","count","setCount","defaultColumns","_","onConfirm","newData","handleDelete","row","findIndex","splice","components","body","cell","col","onCell","__","colSpan","totalRow","marginBottom","rowClassName","InvoiceForm","invoiceNo","customerMap","newCustomers","setNewCustomers","milkMap","t","existingUser","SelectField","onSearch","handleSearch","RestOutlined","PlusOutlined","InvoiceDetailsModal","invoiceDetails","setInvoiceDetails","fetchInvoicesDetails","element","Invoices","visibleID","setVisibleID","selectedInvoiceId","setSelectedInvoiceId","customerName","getRender","Stock","setStocks","fetchStocks","stock","carryForward","eveningQuantity","morningQuantity","document","getElementById","innerHTML","replace","c","r","toString","align","stockData","SaveOutlined","y","Header","Layout","Content","Sider","Footer","App","collapsed","setCollapsed","collapsible","onCollapse","padding","mode","float","NotificationOutlined","MailOutlined","size","UserOutlined","exact","path","ReactDOM","StrictMode","placeholder","inputProps","Select","property","selected"],"mappings":"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","file":"static/js/main.554be10b.chunk.js","sourcesContent":["const CustomerData = [\n    {\n        label : \"Name\",\n        name: 'name',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Mobile\",\n        name: 'mobile',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Type\",\n        name: 'type',\n        type: 'select',\n        inputType: 'text',\n        list: \"customerType\"\n    }\n];\n\nexport default CustomerData;","const MilkData = [\n    {\n        label : \"Name\",\n        name: 'name',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Rates\",\n        name: 'rate',\n        type: 'input',\n        inputType: 'number'\n    },\n    {\n        label : \"Taxable\",\n        name: 'taxable',\n        type: 'select',\n        inputType: 'text',\n        list: 'taxable',\n        defaultValue: 'No'\n    },\n    {\n        label : \"GST Rate (%)\",\n        name: 'gstRate',\n        type: 'select',\n        inputType: 'number',\n        list: 'gstRate',\n        defaultValue: 0\n    }\n];\n\nexport default MilkData;","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport InputField from '../common/InputField';\nimport { createCustomer, updateCustomer } from '../../api'; \nimport swal from 'sweetalert';\nimport CustomerData from '../../data/CustomerData';\nimport SelectField from '../common/SelectField';\nimport { PlusOutlined, RestOutlined } from '@ant-design/icons';\nimport MilkBulkFom from './MillBulkForm';\n\n\nconst CustomerForm = ({ data , callback, setEditData}) => {\n\n    const initialData = CustomerData.reduce((previous, field) => ({...previous,[field.name]: ''}),{});\n    const [formData, setFormData] = useState(initialData);\n\n    const onChange = (e) => {\n        setFormData({...formData,[e.target.name]: e.target.value});\n    }\n\n    const onSelectChange = (name, value) => {\n        setFormData({...formData,[name]: value});\n    }\n\n    useEffect(() => {\n        setFormData(data);\n    },[data])\n\n    const setRatesToData = (data) => {\n        setFormData({\n            ...formData,\n            rates: Object.values(data)\n        })\n    }\n\n    const onSubmit = async (close) => {\n        console.log(formData);\n    \n        if(data) {\n            let response = await updateCustomer(data.id,formData);\n            console.log(response);\n            if(response?.data?.status == true){\n                swal(\"Succesfully updated customer details\", \"success\");\n            }\n            else{\n                swal(\"OOPS Something Went wrong\", \"error\");\n            }\n        }\n        else{\n            let response = await createCustomer(formData);\n            console.log(response);\n            if(response?.data?.status == true){\n                swal(\"Succesfully added customer details\", \"success\");\n            }\n            else{\n                swal(\"OOPS Something Went wrong\", \"error\");\n            }\n        }\n        reset();\n        await callback();\n    }\n\n    const reset = () => {\n        setFormData(initialData);\n        setEditData(null);\n    }\n\n    const customerType =  [{ value: 'normal', name: 'Normal' }, { value: 'special', name: 'Special'} ];\n\n    return (\n        <>\n            <div>\n                <Row>\n                    { \n                        CustomerData.map((field) => field.type == 'input' ?\n                            <InputField\n                                label={field.label}\n                                type={field.inputType} \n                                name={field.name}\n                                onChange={onChange}\n                                key={field.name}\n                                value={formData ? formData[field.name] : ''}\n                            /> : \n                            <SelectField\n                                label={field.label}\n                                option={eval(field.list).map((item) => ({ value: item.value, text: item.name}))}\n                                showSearch\n                                optionFilterProp=\"children\"\n                                value={formData ? formData[field.name] : ''}\n                                showArrow={false}\n                                onChange={(value) => onSelectChange(field.name, value)}\n                                filterOption={(input, option) =>\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                                filterSort={(optionA, optionB) =>\n                                    optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                }\n                                key={field.name}\n                            />\n                        )\n                    }     \n                </Row>\n                {\n                    formData?.type === 'special' ? <MilkBulkFom customerId={data?.id} type={formData.type} setRatesToData={setRatesToData}/> : null\n                }\n                <Row>\n                    <Col span={24} className='text-right'>\n                        <Button onClick={() => reset()} className='mr-4' icon={ <RestOutlined />}>\n                            Reset\n                        </Button>\n                        <Button type=\"primary\" onClick={() => onSubmit()} icon={ <PlusOutlined />} >\n                            { data ? 'Edit' : 'Add' } \n                        </Button>\n                    </Col>\n                \n                </Row>\n            </div>\n        </>\n    );\n};\n\nexport default CustomerForm;\n\n// TazzaLitre rate Taaza rate Slim rate Gold rate 200ml rate Double rate 250ml rate Lassi rate Shakti rate\n// LitreDahi rate 200D rate 400D rate Metro rate Rich rate Paneer rate\n// Mistidahi rate Tazza5litre rate\n","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport InputField from '../common/InputField';\nimport { getAllMilkCategories } from '../../api'; \nimport swal from 'sweetalert';\nconst { Title } = Typography;\n\n\n\nconst MilkBulkFom = ({ customerId , type , setRatesToData}) => {\n\n    const [rates, setRates] = useState({});\n\n    const onChange = (e, data) => {\n        const rateObj = {...rates,\n            [data.id]: {\n                name: data.name, \n                rate: e.target.value,\n                categoryId: data.categoryId,\n                id: data.id\n            }\n        }\n        setRates(rateObj);\n        setRatesToData(rateObj);\n    }\n\n    const fetchMilkCategories = async () => {\n        const response = await getAllMilkCategories(customerId);\n        const data = response?.data?.entity;\n\n        const ratesObj = data.reduce((previous, current) => ({ ...previous, [current.id]: {\n            name: current.name, \n            rate: current.rate,\n            categoryId: customerId ? data.categoryId: current.id,\n            id: current.id\n        } }), {})\n        setRates(ratesObj);\n        setRatesToData(ratesObj);\n    }\n\n    useEffect(() => {\n        if(type === 'special'){\n            fetchMilkCategories();\n        }\n    },[]);\n\n\n    return (\n        <>\n            <div >\n                <Title level={4} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Rates</Title>\n                <Row style={{ height: '200px', overflowY :'auto'}} className='border-b-2 mb-2'>\n                    { \n                        Object.values(rates).map((field) =>\n                            <InputField\n                                label={field.name}\n                                type='number' \n                                name={field.name}\n                                onChange={(e) => onChange(e, field)}\n                                key={field.id}\n                                value={field.rate}\n                                lcol={2}\n                                icol={2}\n                            /> \n                        )\n                    }     \n                </Row>\n            </div>\n        </>\n    );\n};\n\nexport default MilkBulkFom;\n","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport InputField from '../common/InputField';\nimport { createMilCategory, updateMilCategory } from '../../api'; \nimport swal from 'sweetalert';\nimport { PlusOutlined, RestOutlined } from '@ant-design/icons';\nimport MilkData from '../../data/MilkData';\nimport SelectField from '../common/SelectField';\n\n\nconst MilkFom = ({ data , callback, setEditData}) => {\n\n    const initialData = MilkData.reduce((previous, field) => ({...previous,[field.name]: field.defaultValue ? field.defaultValue : ''}),{});\n    const [formData, setFormData] = useState(initialData);\n    const [rateDisbaled, setRateDiabled] = useState(true);\n\n    const onChange = (e) => {\n        setFormData({...formData,[e.target.name]: e.target.value});\n    }\n\n    const onSelectChange = (name, value) => {\n        if(name == 'taxable' ){\n            if( value == 'Yes') setRateDiabled(false);\n            else  setRateDiabled(true);\n        }\n\n        setFormData({...formData,[name]: value});\n        \n    }\n\n    useEffect(() => {\n        setFormData(data);\n    },[data])\n\n    const onSubmit = async (close) => {\n        console.log(formData);\n    \n        if(data) {\n            let response = await updateMilCategory(data.id,formData);\n            console.log(response);\n            if(response?.data?.status == true){\n                swal(\"Succesfully updated milk details\", \"success\");\n            }\n            else{\n                swal(\"OOPS Something Went wrong\", \"error\");\n            }\n        }\n        else{\n            let response = await createMilCategory(formData);\n            console.log(response);\n            if(response?.data?.status == true){\n                swal(\"Succesfully added milk details\", \"success\");\n            }\n            else{\n                swal(\"OOPS Something Went wrong\", \"error\");\n            }\n        }\n        reset();\n        await callback();\n    }\n\n    const reset = () => {\n        setFormData(initialData);\n        setEditData(null);\n    }\n\n    const taxable =  [{ value: 'Yes', name: 'Yes' }, { value: 'No', name: 'No'} ];\n    const gstRate =  [{ value: 0, name: '0 %' },  { value: 1, name: '1 %'}, { value: 1.5, name: '1.5 %'},\n    { value: 3, name: '3 %'}, { value: 5, name: '5 %'}, { value: 7.5, name: '7.5 %'}, { value: 12, name: '12 %'}, { value: 18, name: '18 %'} ];\n\n    return (\n        <>\n            <div>\n                <Row>\n                    { \n                        MilkData.map((field) => field.type == 'input' ?\n                            <InputField\n                                label={field.label}\n                                type={field.inputType} \n                                name={field.name}\n                                onChange={onChange}\n                                key={field.name}\n                                value={formData ? formData[field.name] : ''}\n                            /> :\n                            <SelectField\n                                label={field.label}\n                                option={eval(field.list).map((item) => ({ value: item.value, text: item.name}))}\n                                showSearch\n                                optionFilterProp=\"children\"\n                                value={formData ? formData[field.name] : field.defaultValue}\n                                showArrow={false}\n                                onChange={(value) => onSelectChange(field.name, value)}\n                                filterOption={(input, option) =>\n                                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                }\n                                filterSort={(optionA, optionB) =>\n                                    optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                                }\n                                key={field.name}\n                                disabled={field.name == 'gstRate' ? rateDisbaled : false}\n                            />\n                        )\n                    }     \n                </Row>\n                <Row>\n                    <Col span={24} className='text-right'>\n                        <Button onClick={() => reset()} className='mr-4' icon={ <RestOutlined />}>\n                            Reset\n                        </Button>\n                        <Button type=\"primary\" onClick={() => onSubmit()} icon={ <PlusOutlined />} >\n                            { data ? 'Edit' : 'Add' } \n                        </Button>\n                    </Col>\n                \n                </Row>\n            </div>\n        </>\n    );\n};\n\nexport default MilkFom;\n\n// TazzaLitre rate Taaza rate Slim rate Gold rate 200ml rate Double rate 250ml rate Lassi rate Shakti rate\n// LitreDahi rate 200D rate 400D rate Metro rate Rich rate Paneer rate\n// Mistidahi rate Tazza5litre rate\n","import axios from 'axios';\n\nconst url = `http://${window.location.hostname}:8000`;\nconst API = axios.create({ baseURL : url});\n\nexport const getAllCustomers = () => API.get(`/customers`);\nexport const getCustomersWithDues = () => API.get(`/customers/dues`);\nexport const createCustomer = (customer) => API.post(\"/customers\", customer);\nexport const updateCustomer = (id, customer) => API.put(`/customers/${id}`, customer);\nexport const deleteCustomer= (id) => API.delete(`/customers/${id}`);\n\nexport const getAllMilkCategories = (customerId) => API.get(`/milk-category${customerId ? '?customerId=' + customerId : ''}`);\nexport const createMilCategory = (customer) => API.post(\"/milk-category\", customer);\nexport const updateMilCategory = (id, customer) => API.put(`/milk-category/${id}`, customer);\nexport const deleteMilCategory = (id) => API.delete(`/milk-category/${id}`);\n\nexport const createInvoice = (invoice) => API.post(\"/invoices\", invoice);\nexport const getAllInvoices = () => API.get(`/invoices`);\nexport const getInvoicesByDate = (date) => API.get(`/invoices?date=${date}`);\nexport const getInvoiceById = (invoiceId) => API.get(`/invoices/${invoiceId}`);\n\nexport const getDueInvoices = (customerId) => API.get(`/customers/${customerId}/unpaid-invoices`);\nexport const createPayments = (customerId, payment) => API.post(`/customers/${customerId}/payments`, payment);\n\nexport const createStocks = (stocks) => API.post(\"/stocks\", { stocks });\nexport const getStocks = () => API.get(\"/stocks\");\n\n","const InvoiceData = [\n    {\n        label : \"Invoice No.\",\n        name: 'invoiceNo',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Date\",\n        name: 'invoiceDate',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Customer\",\n        name: 'customerName',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Total Amount\",\n        name: 'total',\n        type: 'select',\n        inputType: 'text',\n        list: \"customerType\"\n    },\n    {\n        label : \"Status\",\n        name: 'paymentStatus',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Amount Paid\",\n        name: 'amountPaid',\n        type: 'input',\n        inputType: 'text'\n    },\n    {\n        label : \"Date Of Payment\",\n        name: 'paymentDate',\n        type: 'input',\n        inputType: 'text'\n    }\n];\n\nexport default InvoiceData;","import swal from 'sweetalert';\n\nexport function sweetalertValidate(message) {\n    swal({\n        text: message,\n        icon: \"error\",\n        buttons:\n        {\n            cancel: {\n                text: \"Cancel\",\n                value: null,\n                visible: false,\n                className: \"btn-sm btn-default\",\n                closeModal: true,\n            },\n            confirm: {\n                text: \"OK\",\n                value: true,\n                visible: true,\n                className: \"btn-sm btn-primary\",\n                closeModal: true\n            }\n        }\n    });\n}\n\nexport function sweetalertMessage(message) {\n    swal({\n        text: message,\n        icon: \"info\",\n        buttons:\n        {\n            cancel: {\n                text: \"Cancel\",\n                value: null,\n                visible: false,\n                className: \"btn-sm btn-default\",\n                closeModal: true,\n            },\n            confirm: {\n                text: \"OK\",\n                value: true,\n                visible: true,\n                className: \"btn-sm btn-info\",\n                closeModal: true\n            }\n        }\n    });\n}\n\nexport function sweetalertSuccess(message) {\n    swal({\n\t\ttext: \"test message\",\n\t\ticon: \"success\",\n\t\tbuttons:\n\t\t{\n\t\t\tcancel: {\n\t\t\t\ttext: \"Cancel\",\n\t\t\t\tvalue: null,\n\t\t\t\tvisible: false,\n\t\t\t\tclassName: \"btn-sm btn-default\",\n\t\t\t\tcloseModal: true,\n\t\t\t},\n\t\t\tconfirm: {\n\t\t\t\ttext: \"OK\",\n\t\t\t\tvalue: true,\n\t\t\t\tvisible: true,\n\t\t\t\tclassName: \"btn-sm btn-info\",\n\t\t\t\tcloseModal: true\n\t\t\t}\n\t\t}\n\t});\n}\n\nexport function sweetalertOkCancel(message, confirmFunction, cancelFunction) {\n    swal(\n        {\n            text: message,\n            icon: \"warning\",\n            buttons:\n            {\n                cancel: {\n                    text: \"Cancel\",\n                    value: null,\n                    visible: true,\n                    className: \"btn-sm btn-default\",\n                    closeModal: true,\n                },\n                confirm: {\n                    text: \"OK\",\n                    value: true,\n                    visible: true,\n                    className: \"btn-sm btn-danger\",\n                    closeModal: true\n                }\n            }\n        }\n    ).then(\n        function (isConfirm) {\n            if (isConfirm) {\n                confirmFunction();\n            } else {\n                cancelFunction();\n            }\n        }\n\n    );\n}\n\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport InputField from '../common/InputField';\nimport { createPayments, getDueInvoices } from '../../api'; \nimport moment from 'moment';\nimport swal from 'sweetalert';\nimport InvoiceData from '../../data/InvoiceData';\nimport { sweetalertOkCancel, sweetalertSuccess, sweetalertValidate } from '../../util/util';\n\nconst { Title } = Typography;\n\n\nconst PaymentModal = ({ visible , setVisible , customer , callback}) => {\n    const initialData = {\n        amountReceived: 0,\n        additionalDue: 0\n    };\n    const [formData, setFormData] = useState(initialData);\n    const [invoices, setInvoices] = useState([]);\n\n    const onChange = (e) => {\n        setFormData({...formData,[e.target.name]: e.target.value});\n    }\n\n    const fetchInvoices = async (customer) => {\n        const response = await getDueInvoices(customer?.id);\n        console.log(response);\n        setInvoices(response?.data?.entity.map((inv) => ({\n            ...inv,\n            invoiceDate: inv.invoiceDate? moment(inv.invoiceDate).format('DD-MM-YYYY') : null,\n            paymentDate: inv.paymentDate ? moment(inv.paymentDate).format('DD-MM-YYYY') : null\n        })));\n    }\n\n    useEffect(() => {\n        if(customer && visible){\n            fetchInvoices(customer);\n        }\n        \n    },[customer, visible])\n\n    const onSubmit = async (close) => {\n        console.log(formData);\n    \n        \n        let response = await createPayments(customer.id, formData);\n        console.log(response);\n        if(response?.data?.status == true){\n            swal(\"Succesfully Payment done\", 'success');\n        }\n        else{\n            swal(\"OOPS Something Went wrong\", 'error');\n        }\n        \n\n        if(close) setVisible(false);\n\n        await callback();\n        setFormData(initialData);\n    }\n\n    const onClose = () => {\n        sweetalertOkCancel(\n            'Are you sure you want to close without adding amount received ?',\n            () => {\n                setVisible(false)\n            },\n            () => {}\n        );\n    }\n\n    const fieldData = InvoiceData;\n    const columns = fieldData.map((column) => ({\n        title:  ( \n            <Typography.Text ellipsis={true} title={column.label}>\n                {column.label}\n            </Typography.Text>\n        ),\n        dataIndex: column.name,\n        key: column.name,\n        width: '150px'\n    })).filter((column) => column.dataIndex !== 'customerName');\n\n    const totalDue = invoices.reduce((total, invoice) => invoice.total + total, 0);\n\n    return (\n        <>\n        <Modal\n            title={`Payment`}\n            visible={visible}\n            width={\"50%\"}\n            style={{ top: 75 }}\n            keyboard={false}\n            onCancel={() => onClose()}\n            footer={[\n                <Button key=\"cancel\" onClick={() => onClose()}>\n                    Cancel\n                </Button>,\n                <Button key=\"savclose\" type=\"primary\" onClick={() => onSubmit(true)}>\n                    Save\n                </Button>,\n                ]}\n        >\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >{customer?.name}'s Due Invoices</Title>\n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={invoices} \n                            columns={columns}\n                            bordered\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row>\n                <Row className=\"w-full\">\n                    { customer?.previousDue > 0 ? \n                        <>\n                            <Col span={24}>\n                                <Title level={4} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}}  >\n                                { `Previous Due : ${customer?.previousDue ? Math.round(customer?.previousDue) : 0}`}\n                                </Title>\n                            </Col>\n                            <Col span={24}>\n                                <Title level={4} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}}  >\n                                { `Due : ${ customer?.due >= 0 ?  Math.round(customer?.due - customer?.previousDue) : 0 }`}\n                                </Title>\n                            </Col>\n                        </> : null\n                    }\n\n                    <Col span={24}>\n                        <Title level={4} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}}  >\n                           { customer?.due >= 0 ? `Total Due : ${customer?.due}` : `Total Advance : ${-customer?.due}`}\n                        </Title>\n                    </Col>\n                   \n                    <InputField\n                        label={'Amount Received'}\n                        type={'number'} \n                        name={'amountReceived'}\n                        onChange={onChange}\n                        key={'amountReceived'}\n                        value={formData['amountReceived']}\n                        lcol={8}\n                        icol={16}\n                    />\n                     <InputField\n                        label={'Previous Due'}\n                        type={'number'} \n                        name={'additionalDue'}\n                        onChange={onChange}\n                        key={'additionalDue'}\n                        value={formData['additionalDue']}\n                        lcol={8}\n                        icol={16}\n                    />\n                </Row> \n            </div>\n                   \n        </Modal>\n        </>\n    );\n};\n\nexport default PaymentModal;","import React, { useEffect, useState } from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic, Table, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { getAllMilkCategories, getCustomersWithDues, getInvoicesByDate } from '../api';\nimport moment from 'moment';\nimport InputField from './common/InputField';\nimport PaymentModal from './Modal/PaymentModal';\nimport { EditOutlined } from '@ant-design/icons';\n\nconst { Title } = Typography;\n\nconst Homepage = () => {\n\n    const [reportDate, setReportDate] = useState(moment().format('YYYY-MM-DD'))\n \n    const [invoices, setInvoices] = useState([]);\n    const [milk, setMilks] = useState([]);\n    const [customers, setCustomers] = useState([]);\n    const [visible, setVisible] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n    const fetchInvoices = async (date) => {\n        const response = await getInvoicesByDate(date);\n        console.log(response);\n        setInvoices(response?.data?.entity);\n    }\n\n    const fetchMilkCategories = async () => {\n      const response = await getAllMilkCategories();\n      setMilks(response?.data?.entity);\n    }\n\n    const fetchCustomers = async (date) => {\n      const response = await getCustomersWithDues();\n      console.log(response);\n      setCustomers(response?.data?.entity);\n  }\n\n    const onChangeReportDate = (e) => {\n      setReportDate(e.target.value);\n    }\n\n    useEffect(async () => {\n        await fetchMilkCategories();\n        await fetchInvoices(reportDate);\n        await fetchCustomers();\n    },[reportDate]);\n\n    const columns = milk.length > 0 ? [{\n          title:  ( \n              <Typography.Text ellipsis={true} title={'Customers'}>\n                  {'Customers'}\n              </Typography.Text>\n          ),\n          dataIndex: 'customer',\n          key: 'customer',\n          width: '150px'\n      },\n      ...(milk.map((ele) => ({\n          title:  ( \n            <Typography.Text ellipsis={true} title={ele.name}>\n                {ele.name}\n            </Typography.Text>\n          ),\n          dataIndex: ele.id,\n          key: ele.id,\n          width: '150px'\n        })))] : [];\n\n    const dataSource = invoices.map((customer) => {\n      const data = {\n        customer: customer.name\n      }\n      for(let i = 0; i < milk.length ; i++){\n        data[milk[i].id] = 0;\n      }\n      const invs = customer.invoices;\n      for(let i = 0; i < invs.length ; i++){\n        const milkCategory = invs[i].milkCategory;\n        for(let j = 0; j < milkCategory.length ; j++){\n          const catId = milkCategory[j].categoryId || milkCategory[j].id;\n          if(data[catId] == undefined){\n            data[catId] = 0;\n          }\n          data[catId] += milkCategory[j].Transaction.quantity;\n        }\n      }\n      return data;\n    });\n\n    const customerColumns = [{\n      title:  ( \n          <Typography.Text ellipsis={true} title={'Customers'}>\n              {'Customers'}\n          </Typography.Text>\n      ),\n      dataIndex: 'name',\n      key: 'customer',\n      width: '40%'\n    },\n    {\n      title:  ( \n          <Typography.Text ellipsis={true} title={'Dues'}>\n              {'Due / Advance'}\n          </Typography.Text>\n      ),\n      key: 'dues',\n      width: '40%',\n      render: (data) => {\n        if(data.due == 0 || data.due == null) return  <div key={'due'+data.id}> {data.due} </div>;\n        return data.due > 0 ?\n         <div key={'due'+data.id} className='text-red-800'>{data.due} (Due)</div> :\n         <div key={'due'+data.id} className='text-green-800'>{-data.due} (Advance)</div>;\n      }\n    },\n    {\n      title: 'Payments',\n      key: 'operation',\n      width: '10%',\n      render: (data) => {\n          return (\n              <div className=\"float-right\">\n                  <Button key={'edit'+data.id} type=\"primary\" onClick={() => onPayment(data)} title=\"Edit\">\n                      <EditOutlined /> Pay\n                  </Button>\n              </div>\n          );\n      }\n    }\n    ];\n\n    const onPayment = (customer) => {\n      setSelectedCustomer(customer)\n      setVisible(true);\n    }\n    return (\n      <>\n          <div  style={{ height: 'calc(100vh - 150px)', overflowY :'auto', overflowX: 'hidden'}}>\n          <Title level={2} className=\"heading\" id='mainheader'>Today's Report</Title>\n            <Row gutter={[32, 32]}>\n                  <Col span={4}><Statistic title=\"Total Collection\" value={ millify(0) }/></Col>\n                  <Col span={4}><Statistic title=\"Total Stocks\" value={millify( 0)}/></Col>\n                  <Col span={4}><Statistic title=\"Total Stocks Left\" value={millify( 0)}/></Col>\n                  <Col span={4}><Statistic title=\"Total Invoices Generated\" value={millify( 0)}/></Col>\n                  <Col span={4}><Statistic title=\"Total New Customers Added\" value={millify( 0)}/></Col>\n            </Row>\n            <div className=\"site-layout-background p-5 mt-1\">\n              <div style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >\n                <Title level={3} >Sales Report ({reportDate})</Title>\n                {/* <div className='absolute top-28 right-16 w-72 mt-2'>\n                  <Row>\n                    <InputField\n                          label={'Date'}\n                          type={'date'} \n                          name={'reportDate'}\n                          onChange={onChangeReportDate}\n                          key={'invoiceDate'}\n                          value={reportDate}\n                          lcol={8}\n                          icol={16}\n                      /> \n                  </Row>\n                </div> */}\n                \n                \n              </div>\n               \n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={dataSource} \n                            columns={columns}\n                            bordered\n                            scroll={{ x: 1600 }}\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row> \n            </div>\n\n            <div className=\"site-layout-background p-5 mt-1\">\n              <div style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >\n                <Title level={3} >All Customers</Title>\n              </div>\n               \n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={customers} \n                            columns={customerColumns}\n                            bordered\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row>\n                <PaymentModal visible={visible} setVisible={setVisible} customer={selectedCustomer}  callback={fetchCustomers}/> \n            </div>\n          </div>\n      </>\n    );\n};\n\nexport default Homepage;\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Button, Menu, Typography, Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { HomeOutlined, MoneyCollectOutlined, BulbOutlined, FundOutlined, MenuOutlined, UsergroupAddOutlined, StrikethroughOutlined } from '@ant-design/icons';\n\nimport icon from '../images/cryptocurrency.png';\n\nconst Navbar = () => {\n  const [activeMenu, setActiveMenu] = useState(true);\n  const [screenSize, setScreenSize] = useState(undefined);\n\n  useEffect(() => {\n    const handleResize = () => setScreenSize(window.innerWidth);\n\n    window.addEventListener('resize', handleResize);\n\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  useEffect(() => {\n    if (screenSize <= 800) {\n      setActiveMenu(false);\n    } else {\n      setActiveMenu(true);\n    }\n  }, [screenSize]);\n\n  return (\n    <div className=\"nav-container  h-screen\">\n      <div className=\"logo-container\">\n        <Typography.Title level={2} className=\"logo\"><Link to=\"/\">AMMS</Link></Typography.Title>\n        <Button className=\"menu-control-container\" onClick={() => setActiveMenu(!activeMenu)}><MenuOutlined /></Button>\n      </div>\n      {activeMenu && (\n      <Menu theme=\"dark\" >\n        <Menu.Item icon={<HomeOutlined />}>\n          <Link to=\"/\">Home</Link>\n        </Menu.Item>\n        <Menu.Item icon={<UsergroupAddOutlined />}>\n          <Link to=\"/customers\">Customers</Link>\n        </Menu.Item>\n        <Menu.Item icon={<MoneyCollectOutlined />}>\n          <Link to=\"/invoices\">Invoices</Link>\n        </Menu.Item>\n        <Menu.Item icon={<BulbOutlined />}>\n          <Link to=\"/milk-category\">Milk Rates</Link>\n        </Menu.Item>\n        <Menu.Item icon={<StrikethroughOutlined />}>\n          <Link to=\"/stocks\">Stocks</Link>\n        </Menu.Item>\n      </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default Navbar;\n","export default __webpack_public_path__ + \"static/media/cryptocurrency.1548aced.png\";","import React, { useEffect, useState } from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic, Table, Button } from 'antd';\nimport CustomerForm from './Forms/CustomerForm';\nimport { deleteCustomer, getAllCustomers } from '../api';\nimport CustomerData from '../data/CustomerData';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { sweetalertMessage, sweetalertValidate } from '../util/util';\n\nconst { Title } = Typography;\n\nconst Customer = () => {\n\n    const [customers, setCustomrs] = useState(null);\n    const [editData, setEditData] = useState(null);\n\n    const fetchCustomers = async () => {\n        const response = await getAllCustomers();\n        setCustomrs(response?.data?.entity);\n    }\n\n    useEffect(() => {\n        fetchCustomers();\n    },[]);\n\n\n    const onEdit = (data) => {\n        setEditData({...data})\n    }\n\n    const  onDelete = async (data) => {\n        const isConfirm = confirm('Are you sure you want to delete ?')\n        if(isConfirm){\n            const response = await deleteCustomer(data.id);\n            if(response?.data?.status){\n                sweetalertMessage('Succesfully Deleted')\n            }\n            else{\n                sweetalertValidate('OOPS!! Something went wrong')\n            }\n            fetchCustomers();\n        } \n    }\n\n    const fieldData = CustomerData;\n    const columns = fieldData.map((column) => ({\n        title:  ( \n            <Typography.Text ellipsis={true} title={column.label}>\n                {column.label}\n            </Typography.Text>\n        ),\n        dataIndex: column.name,\n        key: column.name,\n        width: '150px'\n    }));\n\n    columns.push({\n        title: 'Action',\n        key: 'operation',\n        width: 10,\n        render: (data) => {\n            return (\n                <div className=\"float-right\">\n                    <Button key={'edit'+data.id} type=\"primary\" onClick={() => onEdit(data)} title=\"Edit\">\n                        <EditOutlined />\n                    </Button>\n                    \n                    <Button key={'delete'+data.id} type=\"secondary\" onClick={() => onDelete(data)} className=\"ml-2\" title=\"Delete\">\n                        <DeleteOutlined />\n                    </Button>\n                </div>\n            );\n        },\n    });\n\n    return (\n        <div  style={{ height: 'calc(100vh - 150px)', overflowY :'auto'}}>\n            <div className=\"site-layout-background p-5\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >{editData ? 'Edit' : 'Add'} Customer { editData ? `(${editData.name})`: '' }</Title>\n                <CustomerForm data={editData} callback={fetchCustomers} setEditData={setEditData}/>\n            </div>\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Customers</Title>\n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={customers} \n                            columns={columns}\n                            bordered\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row> \n            </div>\n        </div>\n    );\n};\n\nexport default Customer;\n","import React, { useEffect, useState } from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic, Table, Button } from 'antd';\nimport { deleteMilCategory, getAllMilkCategories } from '../api';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport MilkData from '../data/MilkData';\nimport MilkFom from './Forms/MilkForm';\nimport { sweetalertMessage, sweetalertValidate } from '../util/util';\n\nconst { Title } = Typography;\n\nconst MilkCategory = () => {\n\n    const [milk, setMilks] = useState(null);\n    const [editData, setEditData] = useState(null);\n\n    const fetchMilkCategories = async () => {\n        const response = await getAllMilkCategories();\n        setMilks(response?.data?.entity);\n    }\n\n    useEffect(() => {\n        fetchMilkCategories();\n    },[]);\n\n\n    const onEdit = (data) => {\n        setEditData({...data})\n    }\n\n    const  onDelete = async (data) => {\n        const isConfirm = confirm('Are you sure you want to delete ?')\n        if(isConfirm){\n            const response = await deleteMilCategory(data.id);\n            if(response?.data?.status){\n                sweetalertMessage('Succesfully Deleted')\n            }\n            else{\n                sweetalertValidate('OOPS!! Something went wrong')\n            }\n            fetchMilkCategories();\n        } \n    }\n\n    const fieldData = MilkData;\n    const columns = fieldData.map((column) => ({\n        title:  ( \n            <Typography.Text ellipsis={true} title={column.label}>\n                {column.label}\n            </Typography.Text>\n        ),\n        dataIndex: column.name,\n        key: column.name,\n        width: '150px'\n    }));\n\n    columns.push({\n        title: 'Action',\n        key: 'operation',\n        width: 10,\n        render: (data) => {\n            return (\n                <div className=\"float-right\">\n                    <Button key={'edit'+data.id} type=\"primary\" onClick={() => onEdit(data)} title=\"Edit\">\n                        <EditOutlined />\n                    </Button>\n                    \n                    <Button key={'delete'+data.id} type=\"secondary\" onClick={() => onDelete(data)} className=\"ml-2\" title=\"Delete\">\n                        <DeleteOutlined />\n                    </Button>\n                </div>\n            );\n        },\n    });\n\n    return (\n        <>\n            <div className=\"site-layout-background p-5\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >{editData ? 'Edit' : 'Add'} Milk Category { editData ? `(${editData.name})`: '' }</Title>\n                <MilkFom data={editData} callback={fetchMilkCategories} setEditData={setEditData}/>\n            </div>\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Milk Categories</Title>\n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={milk} \n                            columns={columns}\n                            bordered\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row> \n            </div>\n        </>\n    );\n};\n\nexport default MilkCategory;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Button, Form, Input, Popconfirm, Select, Table } from 'antd';\nimport { getAllMilkCategories } from '../../api';\n\nconst EditableContext = React.createContext(null);\n\nconst EditableRow = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  customerData,\n  milk,\n  ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    \n    useEffect(() => {\n        if (editing) {\n            inputRef.current.focus();\n        }\n    }, [editing]);\n\n    const toggleEdit = () => {\n        // setEditing(!editing);\n        form.setFieldsValue({\n        [dataIndex]: record[dataIndex],\n        });\n    };\n\n\n  const onSave = (name, value) => {\n    let newValues = {};\n    if( dataIndex === 'categoryName'){\n        const gstRate = customerData.type == 'special' ? milk[value].normal.gstRate : milk[value].gstRate;\n        newValues = { categoryName: milk[value].name, categoryId: value, rate: milk[value].rate, gstRate };\n        if(record.quantity != undefined){\n          newValues.total = Math.round(parseFloat(newValues.rate) * parseFloat(record.quantity) * 10) / 10;\n          newValues.totalWithTax = Math.round((newValues.total + (newValues.total * newValues.gstRate) / 100) * 10) / 10;\n        }\n    }\n\n    if(dataIndex == 'quantity' && record.rate != undefined){\n      newValues = { quantity: value };\n      newValues.total =  Math.round(parseFloat(record.rate) * parseFloat(value) * 10) / 10;\n      newValues.totalWithTax = Math.round((newValues.total + (newValues.total * record.gstRate) / 100) * 10) / 10 ;\n    }\n\n    handleSave({ ...record, ...newValues });\n  }\n\n    let childNode = children;\n\n    if (editable) {\n        //childNode = editing ? (\n        childNode = record.categoryName != 'Total Amount' ?  ( <Form.Item\n            style={{\n            margin: 0,\n            }}\n            name={dataIndex}\n            rules={[\n            {\n                required: true,\n                message: `${title} is required.`,\n            },\n            ]}\n        >\n            { dataIndex !== 'categoryName' ? \n                <Input onChange={(e) => onSave(dataIndex, e.target.value)} /> :\n                <Select\n                    label={'Customer'}\n                    editable\n                    showSearch\n                    optionFilterProp=\"children\"\n                    showArrow={false}\n                    onChange={(value) => onSave(dataIndex, value)}\n                    filterOption={(input, option) =>\n                        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                    }\n                    filterSort={(optionA, optionB) =>\n                        optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                    }\n                    key={'customerId'}\n                >\n                    { Object.values(milk).map((ele,index) => <Option value={ele.id} key={index}>{ele.name}</Option>) }\n                </Select>\n            }\n        </Form.Item>\n        ) : (\n        <div\n            className=\"editable-cell-value-wrap font-bold\"\n            style={{\n              paddingRight: 24,\n              fontSize: '16px',\n            }}\n        >\n            {children}\n        </div>\n        );\n    }\n\n    return <td {...restProps}>{childNode}</td>;\n};\n\nconst EditableTable = ({ setTransactions, customerData, transactions, milk, notEditable }) => {\n  const [dataSource, setDataSource] = useState([]);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    setDataSource(transactions);\n  },[transactions])\n\n  const handleDelete = (key) => {\n    const newData = dataSource.filter((item) => item.key !== key);\n    setDataSource(newData);\n  };\n\n  const defaultColumns = [\n    {\n      title: 'Item Name',\n      dataIndex: 'categoryName',\n      width: '35%',\n      editable: !notEditable\n    },\n    {\n      title: 'Rate',\n      dataIndex: 'rate',\n      width: '10%',\n    },\n    {\n      title: 'Quantity',\n      dataIndex: 'quantity',\n      width: '10%',\n      editable: !notEditable\n    },\n    {\n      title: 'Total',\n      dataIndex: 'total',\n      width: '10%',\n    },\n    {\n      title: 'GST Rate (%)',\n      dataIndex: 'gstRate',\n      width: '10%',\n    },\n    {\n      title: 'Total( inc. tax)',\n      dataIndex: 'totalWithTax',\n      width: '10%',\n    },\n  ];\n\n  if(!notEditable){\n    defaultColumns.push({\n      title: 'Action',\n      dataIndex: 'operation',\n      width: '5%',\n      render: (_, record) =>\n       record.categoryName !== 'Total Amount' ? dataSource.length >= 1 ? (\n          <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\n            <a>Delete</a>\n          </Popconfirm>\n        ) : null : null,\n    })\n  }\n\n  const handleAdd = () => {\n    const newData = {\n      key: count,\n      categoryName: `Select Item`,\n      rate: '0',\n      quantity: `0`,\n      total: 0,\n      gstRate: 0,\n      totalWithTax: 0\n    };\n    setDataSource([...dataSource, newData]);\n    setCount(count + 1);\n  };\n\n  const handleSave = (row) => {\n    const newData = [...dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item, ...row });\n    setDataSource(newData);\n    setTransactions(newData);\n  };\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n  const columns = defaultColumns.map((col) => {\n\n    return {\n      ...col,\n      onCell: (record, index) => {\n        let __ = {};\n        if(record.categoryName == 'Total Amount' && col.dataIndex == 'categoryName' ){\n          __ = {\n            colSpan: 5\n          }\n        }\n\n        if(record.categoryName == 'Total Amount' && (col.dataIndex == 'quantity' || col.dataIndex == 'rate' || col.dataIndex == 'gstRate' || col.dataIndex == 'total') ){\n          __ = {\n            colSpan: 0\n          }\n        }\n        if (!col.editable) {\n          return __;\n        }\n        \n        return ({\n            record,\n            editable: col.editable,\n            dataIndex: col.dataIndex,\n            title: col.title,\n            handleSave,\n            customerData,\n            milk,\n            ...__\n          })\n        },\n    };\n  });\n\n  const totalRow = {\n    key: count + 2,\n    categoryName: `Total Amount`,\n    totalWithTax: Math.round(dataSource.reduce((total, current) => total + current.totalWithTax, 0))\n  }\n  return (\n    <div>\n      { !notEditable ? \n        <Button\n          onClick={handleAdd}\n          type=\"primary\"\n          style={{\n            marginBottom: 16,\n          }}\n        > \n        Add a item\n      </Button> : null }\n      <Table\n        components={components}\n        rowClassName={() => 'editable-row'}\n        bordered\n        dataSource={[...dataSource, totalRow]}\n        columns={columns}\n      />\n    </div>\n  );\n};\n\nexport default EditableTable;","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport InputField from '../common/InputField';\nimport { createInvoice, getAllMilkCategories } from '../../api'; \nimport swal from 'sweetalert';\nimport SelectField from '../common/SelectField';\nimport { PlusOutlined, RestOutlined } from '@ant-design/icons';\nimport EditableTable from '../common/EditableTable';\nimport moment from 'moment';\nimport { sweetalertValidate } from '../../util/util';\n\n\nconst InvoiceForm = ({ data, customers , callback, setEditData}) => {\n    const initialData = { \n        invoiceNo:'' ,\n        customerId: '' , \n        total: '', \n        transactions: [], \n        invoiceDate: moment().format('YYYY-MM-DD')\n    }\n\n    const [formData, setFormData] = useState(initialData);\n    const customerMap = customers ? customers.reduce((previous, current) => ({...previous,[current.id]: current}), {}) : {};\n    const [milk, setMilks] = useState({});\n    const [newCustomers, setNewCustomers] = useState([]);\n\n    const fetchMilkCategories = async () => {\n        const customerData = formData && formData.customerId && customerMap[formData.customerId]\n        const response = await getAllMilkCategories(customerData && customerData.type == 'special' ? customerData.id : undefined);\n        const milkMap = response?.data?.entity?.reduce((previous, current) => ({...previous, [current.id]: current}), {});\n        setMilks(milkMap);\n    }\n\n    useEffect(async () => {\n        await fetchMilkCategories();\n    }, [formData]);\n\n    const onChange = (e) => {\n        setFormData({...formData,[e.target.name]: e.target.value});\n    }\n\n    const onSelectChange = (name, value) => {\n        console.log('cust', value);\n        setFormData({...formData,[name]: value});\n    }\n\n    const onSubmit = async (close) => {\n        console.log(formData);\n        if(!formData.transactions || formData.transactions?.length == 0){\n            sweetalertValidate('Please insert atleast one item');\n            return;\n        }\n        if(formData.customerId == ''){\n            sweetalertValidate('Please select customer');\n            return;\n        }\n        formData.total = Math.round(formData.transactions.reduce((total,t) => total + (t.totalWithTax), 0));\n        formData.existingUser = !!customerMap[formData.customerId];\n    \n        let response = await createInvoice(formData);\n        console.log(response);\n        if(response?.data?.status == true){\n            swal(\"Succesfully generated invoice details\", \"success\");\n            reset();    \n            await callback(formData.customerId, response.data.entity.customer);\n        }\n        else{\n            swal(\"OOPS Something Went wrong\", \"error\");\n        }\n        \n    }\n\n    const reset = () => {\n        setFormData(initialData);\n    }\n\n    const setTransactions = (transactions) => {\n        setFormData({...formData,'transactions': transactions});\n    }\n\n    const handleSearch = (value) => {\n        if (value) {\n            setNewCustomers([{ value: value, text: value }]);\n        }\n    }\n\n    return (\n        <>\n            <div>\n                <Row>\n                    <SelectField\n                        label={'Customer'}\n                        option={customers ? [...customers.map((item) => ({ value: item.id, text: item.name})), ...newCustomers] : [...newCustomers]}\n                        showSearch\n                        optionFilterProp=\"children\"\n                        value={formData ? formData['customerId'] : ''}\n                        showArrow={false}\n                        onSearch={(value) => handleSearch(value)}\n                        onChange={(value) => onSelectChange('customerId', value)}\n                        filterOption={(input, option) =>\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                        }\n                        filterSort={(optionA, optionB) =>\n                            optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n                        }\n                        key={'customerId'}\n                    /> \n                    <InputField\n                        label={'Dated'}\n                        type={'date'} \n                        name={'invoiceDate'}\n                        onChange={onChange}\n                        key={'invoiceDate'}\n                        value={formData ? formData['invoiceDate'] : ''}\n                    />     \n                </Row>\n                <Row>\n                    <Col  span={24}>\n                        <EditableTable \n                            setTransactions={setTransactions}\n                            customerData={formData && formData.customerId && ( customerMap[formData.customerId] || { type: 'normal' } ) }\n                            transactions={formData && formData.transactions}\n                            milk={milk}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24} className='text-right'>\n                        <Button onClick={() => reset()} className='mr-4' icon={ <RestOutlined />}>\n                            Reset\n                        </Button>\n                        <Button type=\"primary\" onClick={() => onSubmit()} icon={ <PlusOutlined />} >\n                            { 'Generate Invoice' } \n                        </Button>\n                    </Col>\n                \n                </Row>\n            </div>\n        </>\n    );\n};\n\nexport default InvoiceForm;\n","import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Table, Typography } from 'antd';\nimport { getAllMilkCategories, getInvoiceById } from '../../api'; \nimport moment from 'moment';\nimport EditableTable from '../common/EditableTable';\n\nconst { Title } = Typography;\n\n\nconst InvoiceDetailsModal = ({ visible , setVisible , invoiceId }) => {\n    const [invoiceDetails, setInvoiceDetails] = useState({\n        transactions: []\n    });\n    const [milk, setMilks] = useState({});\n\n    const fetchInvoicesDetails = async (invoiceId) => {\n        const response = await getInvoiceById(invoiceId);\n        console.log(response);\n\n        const transactions = response?.data?.entity.milkCategory.map((element) => {\n            const total  = element.Transaction.rate * element.Transaction.quantity;\n            return ({\n                categoryName: element.name,\n                rate: element.Transaction.rate,\n                quantity: element.Transaction.quantity,\n                total: element.Transaction.rate * element.Transaction.quantity,\n                gstRate: element.gstRate,\n                totalWithTax: Math.round((total + (total * element.gstRate) / 100) * 10) / 10\n            })\n        })\n\n        setInvoiceDetails({ ...response?.data?.entity, transactions});\n    }\n\n    useEffect(async () => {\n        console.log('calling', invoiceId);\n        if(invoiceId){\n            await fetchInvoicesDetails(invoiceId);\n        }\n    }, [invoiceId]);\n\n    return (\n        <>\n        <Modal\n            title={`Invoice Details`}\n            visible={visible}\n            width={\"50%\"}\n            style={{ top: 75 }}\n            keyboard={false}\n            onCancel={() => setVisible(false)}\n            footer={[]}\n        >\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Row>\n                    <Col span={12}>\n                        <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >\n                            Customer Name : {invoiceDetails?.customer?.name}\n                        </Title>\n                    </Col>\n                    <Col span={12}>\n                        <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >\n                            Dated : { moment(invoiceDetails?.invoiceDate).format('DD-MM-YYYY') }\n                        </Title>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col  span={24}>\n                        <EditableTable\n                            customerData={invoiceDetails && invoiceDetails.customerId && invoiceDetails?.customer}\n                            transactions={invoiceDetails && invoiceDetails?.transactions }\n                            milk={{}}\n                            notEditable={true}\n                        />\n                    </Col>\n                </Row>\n            </div>\n                   \n        </Modal>\n        </>\n    );\n};\n\nexport default InvoiceDetailsModal;","import React, { useEffect, useState } from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic, Table, Button } from 'antd';\nimport CustomerForm from './Forms/CustomerForm';\nimport { getAllCustomers, getAllInvoices } from '../api';\nimport InvoiceData from '../data/InvoiceData';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport InvoiceForm from './Forms/InvoiceForm';\nimport moment from 'moment';\nimport PaymentModal from './Modal/PaymentModal';\nimport InvoiceDetailsModal from './Modal/InvoiceDetailModal';\n\nconst { Title } = Typography;\n\nconst Invoices = () => {\n\n    const [customers, setCustomers] = useState(null);\n    const [invoices, setInvoices] = useState(null);\n    const [visible, setVisible] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n    const [visibleID, setVisibleID] = useState(false);\n    const [selectedInvoiceId, setSelectedInvoiceId] = useState(null);\n\n    const fetchCustomers = async () => {\n        const response = await getAllCustomers();\n        setCustomers(response?.data?.entity);\n    }\n\n    const fetchInvoices = async () => {\n        const response = await getAllInvoices();\n        setInvoices(response?.data?.entity.map((inv) => ({\n            ...inv,\n            customerName: inv.customer.name,\n            invoiceDate: inv.invoiceDate? moment(inv.invoiceDate).format('DD-MM-YYYY') : null,\n            paymentDate: inv.paymentDate ? moment(inv.paymentDate).format('DD-MM-YYYY') : null\n        })));\n    }\n\n    useEffect(() => {\n        fetchCustomers();\n        fetchInvoices();\n    },[]);\n\n    const openInvoiceDetail = (invoiceId) => {\n        setSelectedInvoiceId(invoiceId);\n        setVisibleID(true);  \n    }\n\n    const getRender = (column) => {\n        if(column.name == 'invoiceNo'){\n            return {\n                render: (invoiceNo, data) => {\n                    console.log('data', data)\n                    return (\n                        <div>\n                            <a onClick={() => openInvoiceDetail(data.id)} className='underline text-blue-900'>\n                            { invoiceNo }\n                            </a>\n                        </div>\n                    )\n                }\n            }\n        }\n        return {};\n    }\n    const fieldData = InvoiceData;\n    const columns = fieldData.map((column) => ({\n        title:  ( \n            <Typography.Text ellipsis={true} title={column.label}>\n                {column.label}\n            </Typography.Text>\n        ),\n        dataIndex: column.name,\n        key: column.name,\n        width: '150px',\n        ...getRender(column)\n    }));\n\n    return (\n        <div  style={{ height: 'calc(100vh - 150px)', overflowY :'auto'}}>\n            <div className=\"site-layout-background p-5\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Generate Invoice </Title>\n                <InvoiceForm \n                    customers={customers} \n                    callback={async (customerId, customerData) => {\n                        await fetchInvoices();\n                        setSelectedCustomer(customerData)\n                        setVisible(true);\n                    }}/>\n            </div>\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Invoices</Title>\n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={invoices} \n                            columns={columns}\n                            bordered\n                            pagination={ {}}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row> \n                <PaymentModal visible={visible} setVisible={setVisible} customer={selectedCustomer}  callback={fetchInvoices}/>\n                <InvoiceDetailsModal visible={visibleID} setVisible={setVisibleID} invoiceId={selectedInvoiceId} />\n            </div>\n        </div>\n    );\n};\n\nexport default Invoices;\n","import React, { useEffect, useState } from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic, Table, Button, Input } from 'antd';\nimport { createStocks, getStocks } from '../api';\nimport { SaveOutlined } from '@ant-design/icons';\nimport { sweetalertMessage, sweetalertValidate, uuid } from '../util/util';\n\nconst { Title } = Typography;\n\nconst Stock = () => {\n\n    const [stocks, setStocks] = useState([]);\n\n    const fetchStocks = async () => {\n        const response = await getStocks();\n        console.log(response)\n        setStocks(response?.data?.entity.map((stock) => ({ ...stock, name: stock.milkCategory.name, total: parseFloat(stock.carryForward) + parseFloat(stock.eveningQuantity) + parseFloat(stock.morningQuantity)})));\n    }\n\n    useEffect(() => {\n        fetchStocks();\n    },[]);\n\n    const onChange = (name, value, data) => {\n        const total = parseFloat(data.carryForward) + parseFloat(value) + parseFloat(name == 'morningQuantity' ? data.eveningQuantity : data.morningQuantity);\n        document.getElementById(`total_${data.id}`).innerHTML = total;\n    }\n\n    const getRender = (name) => {\n        if(name == 'morningQuantity' || name == 'eveningQuantity'){\n            return {\n                render: (value, data) => {\n                    return (\n                        <Input\n                            onChange={(e) => onChange(name, e.target.value, data)}\n                            defaultValue={value}\n                            type='number'\n                            key={uuid()}\n                            id={`${name}_${data.id}`}\n                        />\n                    )\n                }\n            }\n        }\n        if(name == 'total'){\n            return {\n                render: (value, data) => {\n                    return (\n                        <div className='font-bold' id={`total_${data.id}`}>\n                           {value}\n                        </div>\n                    )\n                }\n            }\n        }\n        return {};\n    }\n\n    const fieldData = [\n        {\n            label: \"Item Name\",\n            name: 'name',\n        },\n        {\n            label: \"Carry Forward\",\n            name: 'carryForward'\n        },\n        {\n            label: \"Morning Quantity\",\n            name: 'morningQuantity',\n        },\n        {\n            label: \"Evening Quantity\",\n            name: 'eveningQuantity',\n        },\n        {\n            label: \"Total\",\n            name: 'total',\n        },\n    ];\n    const columns = fieldData.map((column) => ({\n        title:  ( \n            <Typography.Text ellipsis={true} title={column.label}>\n                {column.label}\n            </Typography.Text>\n        ),\n        dataIndex: column.name,\n        key: column.name,\n        width: '100px',\n        align: column.align ? column.align : 'left',\n        ...getRender(column.name)\n    }));\n\n    const onSave = async () => {\n        const stockData = stocks.map((stock) => ({\n            id: stock.id,\n            categoryId: stock.categoryId,\n            carryForward: stock.carryForward,\n            morningQuantity: document.getElementById(`morningQuantity_${stock.id}`).value,\n            eveningQuantity: document.getElementById(`eveningQuantity_${stock.id}`).value\n        }));\n        console.log(stockData)\n        const response = await createStocks(stockData);\n        console.log(response)\n        if(response?.data?.status == true){\n            sweetalertMessage(\"Succesfully Saved Stock Details\");\n        }\n        else{\n            sweetalertValidate(\"OOPS Something Went wrong\");\n        }\n    }\n\n    return (\n        <>\n            <div className=\"site-layout-background p-5 mt-1\">\n                <Row>\n                    <Col span={12}>\n                        <Title level={3} style={{color: 'rgba(107, 114, 128, var(--tw-text-opacity))'}} className='border-b-2' >Today's Stocks</Title>\n                    </Col>\n                    <Col span={12}>\n                        <Button type=\"primary\" className='float-right' icon={ <SaveOutlined /> } onClick={onSave}> Save </Button>\n                    </Col>\n                </Row>\n               \n                <Row className=\"w-full\">\n                    <Col span={24}>\n                        <Table\n                            dataSource={stocks} \n                            columns={columns}\n                            bordered\n                            scroll={{ y: 'calc(100vh - 300px)' }}\n                            pagination={false}\n                            rowKey={(record) => record.id + (new Date().getTime() + Math.random() * 10000)}\n                        />\n                    </Col>\n                </Row> \n            </div>\n        </>\n    );\n};\n\nexport default Stock;\n","import React, { useState } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport './App.css';\nimport { Avatar, Breadcrumb, Layout, Menu } from 'antd';\nimport { Customer, Homepage, Navbar, MilkCategory } from './components';\nimport { MailOutlined, NotificationOutlined, UserOutlined } from '@ant-design/icons';\nimport Invoices from './components/Invoices';\nimport Stock from './components/Stock';\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst App = () => {\n  const [collapsed, setCollapsed] = useState(false);\n  return (\n    <Layout className='h-screen'>\n      <Sider collapsible collapsed={collapsed} onCollapse={(value) => setCollapsed(value)}>\n        <Navbar />\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header\n          className=\"site-layout-background\"\n          style={{\n            padding: 0,\n          }}\n        >\n           <Menu mode=\"horizontal\" style={{ float: 'right', width: 'auto'}}>\n              <Menu.Item key=\"notification\" icon={<NotificationOutlined />}>\n              </Menu.Item>\n              <Menu.Item key=\"mail\" icon={<MailOutlined />}>\n              </Menu.Item>\n              <Menu.Item key=\"profile\">\n                <Avatar size={30} icon={<UserOutlined />} />\n              </Menu.Item>\n            </Menu>\n        </Header>\n        <Content style={{ margin: '0 16px' }} >\n          <Breadcrumb style={{ margin: '16px 0'}}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n          </Breadcrumb>\n          <div style={{ padding: 10 }} >\n           <Switch>\n              <Route exact path=\"/\">\n                <Homepage />\n              </Route>\n              <Route exact path=\"/customers\">\n                <Customer />\n              </Route>\n              <Route exact path=\"/milk-category\">\n                <MilkCategory />\n              </Route>\n              <Route exact path=\"/invoices\">\n                <Invoices />\n              </Route>\n              <Route exact path=\"/stocks\">\n                <Stock />\n              </Route>\n            </Switch>\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { Col, Row } from \"antd\";\n\nconst InputField = ({label , lcol , icol, placeholder, ...inputProps }) => {\n    return (\n        <>\n            \n                <Col span={lcol? lcol : 4} className=\"mb-3\">\n                    <label className=\"block font-semibold mt-5 text-right mr-10\">{label}</label>\n                </Col>\n                <Col span={icol ? icol : 8} className=\"mb-3\">\n                    <input {...inputProps} placeholder={placeholder? placeholder : label} className=\"w-full py-2 px-2 mt-2 border-2\"/>\n                </Col>\n            \n            \n        </>\n    )\n}\n\nexport default InputField;","import { Col, Row, Select } from \"antd\";\nconst { Option } = Select;\n\nconst SelectField = ({label, lcol , icol, option, selected, ...property}) => {\n    return (\n        <>\n                <Col span={lcol? lcol : 4} className=\"mb-3\">\n                    <label className=\"block font-semibold mt-5 text-right mr-10\">{label}</label>\n                </Col>\n                <Col span={icol? icol : 8} className=\"mb-3\">\n                    <div className=\"mt-5\">\n                        <Select className=\"w-full\" placeholder={label} {...property}>\n                            { option.map((ele,index) => <Option value={ele.value} key={index}>{ele.text}</Option>) }\n                        </Select>\n                    </div>\n                </Col> \n        </>\n    )\n}\n\nexport default SelectField"],"sourceRoot":""}